#!/bin/bash

# This exposes $IPLANT_USER's external Data Store volumes within the container at: ~/data-store/. 
echo '{"irods_host": "data.cyverse.org", "irods_port": 1247, "irods_user_name": "$IPLANT_USER", "irods_zone_name": "iplant"}' | envsubst > $HOME/.irods/irods_environment.json
#
# -----------Debug info will be written to logs/condor-stdout-0 and condor-stderr-0 in the user's Data Store "analyses" directory
# user who is running the shell
echo "this is the shell user:"
whoami
# CyVerse provides $IPLANT_USER as the current user (who is running the container). e.g., "kriitters"
echo "this is the current CyVerse username: $IPLANT_USER"  
echo "the name of this shell is: $0"  							# /bin/entry.sh
echo "these are the run-time parameters set in the DE app:"
echo "this is the GWB script: $1" 								# /usr/bin/<GWB script>
echo "this is the external Data Store input directory: $2"		# <a user-selected directory in user's Data Store>
echo "this is the external analyses output directory: $3"		# <a user-defined name used to create a directory in the "analyses" folder in the user's Data Store>

# The input directory.
echo "listing of the input directory:"
ls -al /home/ubuntu/data-store/$2
# Note: while the user's input data directory is copied into ~/data-store/, that directory is EXCLUDED
#	during the later copying of ~/data-store/* into the user's Data Store "analyses" directory.
# GWB needs write permissions on the input directory; this can't be done in the dockerfile
sudo chown ubuntu:ubuntu /home/ubuntu/data-store/$2

# The output directory.
# First create the analyses output directory. This must be here and not in the dockerfile
mkdir /home/ubuntu/data-store/$3
# The important thing is that all the outputs to be saved must put in there, so that they will become
#	available in the user's Data Store after job completion.


# GWB scripts are in /usr/bin/
# example cmd to run the GWB module ACC; --nox tells GWB there is no x server:
#		/usr/bin/GWB_ACC --nox -i=<path to input> -o=<path to output>
# construct a command to eval
NOX="--nox"
cmd=( $1 )
[[ -n "$NOX" ]] && cmd+=( "$NOX" )
[[ -n "$2" ]] && cmd+=( "-i=/home/ubuntu/data-store/$2" )
[[ -n "$3" ]] && cmd+=( "-o=/home/ubuntu/output" )
echo "this is the command to eval: ${cmd[@]}"
eval "${cmd[@]}"

cp -r /home/ubuntu/output/* /home/ubuntu/data-store/$3
echo "this is the current directory:"
pwd
echo "ls -al on current directory:"
ls -al
echo "ls -al on the /home directory:"
ls -al /home
echo "ls -al on the /home/.gwb directory:"
ls -al /home/.gwb
echo "listing of /home/ubuntu"
ls -al /home/ubuntu/
echo "listing of /home/ubuntu/data-store/$3/"
ls -al /home/ubuntu/data-store/$3
echo "listing of /home/ubuntu/output"
ls -al /home/ubuntu/output
echo "listing of /home/ubuntu/.gwb"
ls -al /home/ubuntu/.gwb
